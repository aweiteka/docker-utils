#!/usr/bin/env python
# Copyright (C) 2014 Brent Baude <bbaude@redhat.com>, Aaron Weitekamp <aweiteka@redhat.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import argparse
from docker_utils import metadata, docker_wrapper


def main():
    """Entrypoint for script"""

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help', dest='action')
    create_parser = subparsers.add_parser('create', help='Create a snapshot of a container. Creates an inspect json file, a kubernetes json file and a systemd unit file.')
    create_parser.add_argument('cuid',
                               metavar='CONTAINER_ID',
                               help='Container ID')
    create_parser.add_argument('-n', '--name',
                               help='Specify metadata output filename. Defaults to container ID.')
    create_parser.add_argument('-d', '--directory',
                               help='Override default directory')
    create_parser.add_argument('-f', '--force',
                               action='store_true',
                               help='Overwrite existing metadata file. Defaults to false.')
    run_parser = subparsers.add_parser('run', help='Run a container from metadata file')
    run_parser.add_argument('json',
                            metavar='MYAPP.JSON',
                            help='JSON file')
    list_parser = subparsers.add_parser('list', help='List template files on host')
    pull_parser = subparsers.add_parser('pull', help='Pull metadata files from a remote source')
    pull_parser.add_argument('url',
                             metavar='http://example.com/my-app.json',
                             help='Full URL of remote metadata file')
    pull_parser.add_argument('-n', '--name',
                             help='Specify metadata output filename')
    pull_parser.add_argument('-d', '--directory',
                             help='Override default directory')
    pull_parser.add_argument('-f', '--force',
                             action='store_true',
                             help='Overwrite existing metadata file. Defaults to false.')
    deploy_parser = subparsers.add_parser('deploy', help='Deploy metadata files from a data container')
    deploy_parser.add_argument('image',
                             metavar='METADATA/IMAGE',
                             help='Image with metadata files')
    deploy_parser.add_argument('run',
                             help='Run from file in data container')

    args = parser.parse_args()

    if args.action in "run":
        kwargs = {'command': args.action, 'jsonfile': args.json}
        run = docker_wrapper.Run(**kwargs)
        run.start_container()

    elif args.action in "create":
        kwargs = {'cuid': args.cuid,
                  'outfile': args.name,
                  'directory': args.directory,
                  'force': args.force}
        create = metadata.Create(**kwargs)
        create.write_files()
    elif args.action in "list":
        filelist = metadata.List()
        filelist.list_all()
    elif args.action in "pull":
        kwargs = {'outfile': args.name,
                  'directory': args.directory,
                  'force': args.force}
        fetch = metadata.Pull(**kwargs)
        fetch.pull_url(args.url)
    elif args.action in "deploy":
        kwargs = {'image': args.image,
                  'metafile': args.run}
        deploy = metadata.Deploy(**kwargs)
        deploy.get_file()
        print "Starting container from %s" % deploy.installed_file
        run = docker_wrapper.Run(jsonfile=deploy.installed_file)
        run.start_container()


if __name__ == '__main__':
    main()
